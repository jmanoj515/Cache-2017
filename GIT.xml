<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Studio.SourceControl.GIT">
<Description><![CDATA[

<h1>Studio + Git Source Control</h1>
Studio extension to provide Git source control integration</br>
See also <class>Studio.SourceControl.Command.GITClient</class>
<h2>Configuration</h2>

<p>Windows Example</p>
<pre>
s ^GITConfig($username,"gitpath")="c:\SmartGitHg 4\git\bin\"  	// path to git binaries
s ^GITConfig($username,"workdir")="c:\sandbox\MyApp\"         	// path to git work directory
s ^GITConfig($username,"authorname")="John Doe"            	  	// [optional] author name used in git commits
s ^GITConfig($username,"authoremail")="johndoe@server.com"    	// [optional] author email used in git commits
s ^GITConfig($username,"output")="c:\git.output.txt"          	// temp. file to store git output
s ^GITConfig($username,"error")="c:\git.error.txt"            	// temp. file to store git error
s ^GITConfig($username,"udl")="1"            					// [optional] use UDL format instead of XML
s ^GITConfig($username,"xmlextension")="0"            			// [optional] use xml as file extension always. When using UDL you may want to turn this off.
s ^GITConfig($username,"on.reloadfiles")=$lb("Studio.SourceControl.Sample.Callback", "Change") 	// [optional] classmethod to call after reloading a file
s ^GITConfig($username,"on.workdirload")=$lb("Studio.SourceControl.Sample.Callback", "Change")	// [optional] classmethod to call after a workdir load operation
s ^GITConfig($username,"on.pull")=$lb("Studio.SourceControl.Sample.Callback", "Change") 		// [optional] classmethod to call after a pull operation
</pre>

<p>Linux example</p>
<pre>
s ^GITConfig($username,"gitpath")="/usr/local/git/bin/"       	// path to git binaries
s ^GITConfig($username,"workdir")="/workspace/myuser/myrepo/" 	// path to git work directory
s ^GITConfig($username,"homedir")="/home/ensemble"            	// path to git home directory
s ^GITConfig($username,"authorname")="John Doe"               	// [optional] author name used in git commits
s ^GITConfig($username,"authoremail")="johndoe@server.com"    	// [optional] author email used in git commits
s ^GITConfig($username,"output")="/tmp/output.txt"            	// temp. file to store git output
s ^GITConfig($username,"error")="/tmp/error.txt"              	// temp. file to store git error
s ^GITConfig($username,"udl")="1"            					// [optional] use UDL format instead of XML
s ^GITConfig($username,"xmlextension")="0"            			// [optional] use xml as file extension always. When using UDL you may want to turn this off.
s ^GITConfig($username,"on.reloadfiles")=$lb("Studio.SourceControl.Sample.Callback", "Change") 	// [optional] classmethod to call after reloading a file
s ^GITConfig($username,"on.workdirload")=$lb("Studio.SourceControl.Sample.Callback", "Change")	// [optional] classmethod to call after a workdir load operation
s ^GITConfig($username,"on.pull")=$lb("Studio.SourceControl.Sample.Callback", "Change") 		// [optional] classmethod to call after a pull operation
</pre>

<h2>Changelog</h2>
<ul>
 <li>0.1 - Simple initial version. Command outputs printed in Studio output</li>
 <li>0.2 - Added HomeDir to GITClient to allow specifying a $HOME env. variable when running git commands</li>
 <li>0.3 - Configuration by $username. Added AuthorName, AuthorEmail to allow specifiyng GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL in shared environments from Caché context</li>
 <li>0.4 - Simplified source control git options: all options enabled. WorkdirLoadFiles now deletes files as well. Callbacks added.</li>
 <li>0.5 - UDL format support added (Caché >= 2016.2)</li>
</ul>]]></Description>
<Super>%Studio.SourceControl.Base</Super>
<TimeCreated>62895,67330.802584</TimeCreated>

<Parameter name="VERSION">
<Default>0.5</Default>
</Parameter>

<Parameter name="FIRSTMENUITEM">
<Description>
First menu item that appears</Description>
<Default>Add</Default>
</Parameter>

<Parameter name="NOTSUPPORTEDTYPES">
<Description>
Not supported item types (or that you don't want to be exported/imported to/from git)</Description>
<Default>PRJ,PKG</Default>
</Parameter>

<Parameter name="NOTUDLEXTENSIONS">
<Description>
Extensions that can not be exported as UDL. XML will always be used.</Description>
<Expression>$lb("hl7","dfi","lut")</Expression>
</Parameter>

<Property name="Logger">
<Description>
Logger instance to display messages</Description>
<Type>Studio.SourceControl.Util.Logger</Type>
<Private>1</Private>
</Property>

<Property name="Command">
<Description>
GIT client wrapper</Description>
<Type>Studio.SourceControl.Command.GITClient</Type>
<Private>1</Private>
</Property>

<Property name="IsControlled">
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<Property name="IsCheckedOut">
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<Property name="IsEditable">
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<Property name="IsAdded">
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<Property name="OnReloadFiles">
<Type>%List</Type>
<Private>1</Private>
</Property>

<Property name="OnWorkDirLoad">
<Type>%List</Type>
<Private>1</Private>
</Property>

<Property name="OnPull">
<Type>%List</Type>
<Private>1</Private>
</Property>

<Property name="UseUDL">
<Description>
Export files in UDL format</Description>
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<Property name="UseXMLExtension">
<Description>
Use always XML as filename extension </Description>
<Type>%Boolean</Type>
<Private>1</Private>
</Property>

<XData name="Menu">
<Description>
Studio menu options</Description>
<Data><![CDATA[
<MenuBase>
<Menu Name="Git" Type="0">
<MenuItem Name="Add" Save="100"/>
<MenuItem Name="Unstage"/>
<MenuItem Name="Revert changes" Save="100"/>
<MenuItem Name="Log"/>
<MenuItem Name="Diff"/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Status"/>
<MenuItem Name="Add All Changes"/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Commit..."/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Switch to Branch..."/>
<MenuItem Name="Create and Switch to Branch..."/>
<MenuItem Name="Diff with Branch..."/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Merge with..."/>
<MenuItem Name="Abort merge"/>
<MenuItem Name="Load status changes"/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Diff with origin"/>
<MenuItem Name="Pull origin->local"/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Push local->origin"/>
<MenuItem Separator="1" Name="--------------"/>
<MenuItem Name="Workdir - Load files"/>
</Menu>
</MenuBase>
]]></Data>
</XData>

<Method name="OnMenuItem">
<Description>

Callback called on each menu item. Allows to enable/disable items</Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	try {
		set menu=$piece(MenuName,","),name=$piece(MenuName,",",2)
		if menu'="Git" quit
		
		// no file is selected
		if ((InternalName="") && ((name="Add")||(name="Unstage")) ) {
			set Enabled=0
			quit
		}
	
		// get file source control status only once for all MenuItems
		if name=..#FIRSTMENUITEM {
			$$$THROWONERROR(sc, ..GetStatus(InternalName,.iscontrolled,.iseditable,.ischeckedout,.isadded))
			set ..IsControlled = iscontrolled
			set ..IsEditable = iseditable
			set ..IsCheckedOut = ischeckedout
			set ..IsAdded = isadded
		} 
	
		/*
		simplify git menu options. all options enabled.
		
		// disable menu items depending on file status
		if name="Add" {
			set:((..IsControlled)) Enabled=0
		} elseif (name="Unstage") {
			set:(('..IsControlled)||(..IsCheckedOut)||('..IsAdded)) Enabled=0
		} elseif (name="Revert changes") {
			set:(('..IsControlled)||('..IsCheckedOut)) Enabled=0
		} elseif (name="Log")||(name="Diff") {
			set:(('..IsControlled)) Enabled=0
		}
		*/
		
		// display current branch name
		if name="Status" {
			set DisplayName = "Status ["_..Command.GetCurrentBranch()_"]"
		}
	} catch errObj {
		set ret = errObj.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="UserAction">
<Description>

Handles user selected action from menu</Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Action=0,Target="",Msg="",Reload=0
	
	set menu=$piece(Name,",")
	if menu'="Git" quit $$$OK
	
	set name=$piece(Name,",",2)
	if menu="Git" {
		if ((name="Revert changes")||(name="Unstage")) {
			set Action=1
			set Target="File """_InternalName_""". Are you sure you want to """_name_"""?"
		}
		elseif (name="Workdir - Load files")||(name="Abort merge") {
			set Action=1
			set Target="WARNING: Are you sure you want to """_name_"""?"
		}
		elseif (name="Commit...")||(name="Amend commit...") {
			set Action=7
			set Target="WARNING: Committing ALL changes. Enter Check-in message here"
		}
		elseif ((name="Create and Switch to Branch...")||(name="Switch to Branch...")||(name="Diff with Branch...")||(name="Merge with...")) {
			set Action=7
			set Target=$piece(name,"...")_". Enter branch name:"
		}
		else {
			quit ..AfterUserAction(Type,Name,InternalName,1,,.Reload)
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<Description>

Perfoms the selected action itself</Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Reload=0
	
	set menu=$piece(Name,",")
	if menu'="Git" quit $$$OK
	
	set name=$piece(Name,",",2)
	set issupported=..IsSupported(InternalName)
	if $$$ISERR(issupported) quit issupported
	
	if Answer'=1 quit $$$OK
	
	if ((name="Add")||(name="Stage")) quit ..Add(InternalName,Msg)
	if name="Unstage" quit ..Unstage(InternalName)
	if name="Revert changes" quit ..Revert(InternalName)
	if name="Log" quit ..Log(InternalName)
	if name="Diff" quit ..Diff(InternalName)
	
	if name="Status" quit ..Status(InternalName)
	if name="Add All Changes" quit ..AddAllChanges()
	if name="Commit..." quit ..Commit(InternalName,Msg)
	if name="Amend commit..." quit ..Commit(InternalName,Msg,1)
	
	if name="Switch to Branch..." quit ..SwitchToBranch(Msg)
	if name="Create and Switch to Branch..." quit ..CreateAndSwitchToBranch(Msg)
	if name="Diff with Branch..." quit ..DiffWithBranch(Msg)
	
	if name="List Branches" quit ..ListBranches(Msg)
	
	if name="Merge with..." quit ..Merge(Msg)
	if name="Abort merge" quit ..AbortMerge()
	if name="Load status changes" quit ..LoadStatusChanges()
	
	if name="Diff with origin" quit ..Pull(1)
	if name="Pull origin->local" quit ..Pull()
	if name="Push local->origin" quit ..Push()
	
	if name="Workdir - Load files" quit ..WorkdirLoadFiles(..Command.WorkDir)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Login">
<Description>

Initialization. Load configuration and show status of work dir.</Description>
<FormalSpec>Name:%String,Password:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define GetConfig(%name,%default) $get(^GITConfig($username,%name), %default)
	
	set ret=$$$OK
	
	try {
		set ..Logger = ##class(Studio.SourceControl.Util.Logger).%New()
		do ..Logger.Info("=========================================================")
    	do ..Logger.Info(">GIT Source Control")
    	
    	set gitpath = $$$GetConfig("gitpath", "")
		set workdir = $$$GetConfig("workdir","")
		set homedir = $$$GetConfig("homedir","")
		set authorname = $$$GetConfig("authorname","")
		set authoremail = $$$GetConfig("authoremail","")
		set output = $$$GetConfig("output","")
		set error = $$$GetConfig("error","")
		set ..OnWorkDirLoad = $$$GetConfig("on.workdirload","")
		set ..OnPull = $$$GetConfig("on.pull","")
		set ..OnReloadFiles = $$$GetConfig("on.reloadfiles","")
		set ..UseUDL = $$$GetConfig("udl",0)
		set ..UseXMLExtension = $$$GetConfig("xmlextension",1)
	
    	set ..Command = ##class(Studio.SourceControl.Command.GITClient).%New(gitpath, workdir, homedir, authorname, authoremail, output, error)
    	do ..Logger.Info(">Working Directory: "_..Command.WorkDir)
	
		$$$THROWONERROR(sc,..Status(""))		
	} catch errObj {
		set sc = errObj.AsStatus()
		do DecomposeStatus^%apiOBJ(sc,.err,"d")
 		for i=1:1:err do ..Logger.Error(err(i))
		
		set tError="Error while checking git status. GIT Source Control IS NOT initialized. Check your ^GITConfig global"
	    set ret=$$$ERROR($$$GeneralError,tError)
	    do ..Logger.Error(tError)
	}
	do ..Logger.Info("========================================================="_$char(13))
	
	quit ret
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<Description>

OnBeforeLoad. Loads source controlled files from external file</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set InternalName = ..NormalizeInternalName(InternalName)
 set extname = ..ExternalName(InternalName)
 quit:extname="" $$$OK
 
 // skip the import if not in source control
 if '..IsInSourceControl(InternalName) {
	 do ..Logger.Info(InternalName_" is not in source control, skipping import") 
	 quit $$$OK
 }
 
 // if the timestamp on the file is the same as the last time it was imported 
 // then there is nothing to do as it is already up to date
 if ##class(%File).GetFileDateModified(extname) = $get(^SourceControl(0,InternalName)) quit $$$OK

 // call the function to do the import
 set sc=$system.OBJ.Load(extname,"-l-d")
 if $$$ISOK(sc) {
 	do ..Logger.Info("Imported '"_InternalName_"' from file '"_extname_"'")
 	set ^SourceControl(0,InternalName)=##class(%File).GetFileDateModified(extname)
 	set ^SourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 } else {
 	Do DecomposeStatus^%apiOBJ(sc,.err,"d")
 	for i=1:1:err do ..Logger.Error(err(i))
 }
 quit sc
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>

OnAfterSave. Exports source controlled files to external file</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename=..ExternalName(InternalName)
 	if filename="" Quit $$$OK

 	// if the timestamp of the item in Cache has not changed then there is no point in saving it again
 	if ##class(%RoutineMgr).TS(InternalName)=$get(^SourceControl(1,InternalName)) Quit $$$OK

 	// call the export function
 	if (..IsInSourceControl(InternalName)) {
 		set sc = ..ExportToFile(InternalName, filename)
 		if $$$ISOK(sc) {
 			do ..Logger.Info("Exported '"_InternalName_"' to file '"_filename_"'")
 			set ^SourceControl(0,InternalName)=##class(%File).GetFileDateModified(filename)
 			set ^SourceControl(1,InternalName)=##class(%RoutineMgr).TS(InternalName)
 		} else {
 			do DecomposeStatus^%apiOBJ(sc,.err,"d")
 			for i=1:1:err do ..Logger.Error(err(i))
 		}
 	}
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportToFile">
<Description>

Exports to external file</Description>
<FormalSpec>InternalName:%String,Filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define isUDLSupported ($system.Version.GetNumber()>=2016.2)
	
	#if $$$isUDLSupported
		// Caché version supports exporting as UDL
		// UDL option enabled and file extension supports UDL, export as UDL
		set ext = $zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
		if ..UseUDL,..CanExportExtensionUDL(ext) {
			quit $system.OBJ.ExportUDL(InternalName, Filename, "-d /diffexport")
		}
	#else
		// Caché does not support exporting as UDL.
		// UDL option enabled, log an error and continue to export as XML.
		if ..UseUDL {
			do ..Logger.Error("Caché version "_$zv_" does not support exporting as UDL. Using XML instead...")
		}
	#endif
	
	// Default, export as XML.
	quit $system.OBJ.Export(InternalName, Filename, "-d /diffexport")
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>

OnAfterCompile. Same as OnAfterSave</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ 	quit ..OnAfterSave(InternalName)
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<Description>

Called after an item is deleted.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..IsInSourceControl(InternalName) {
		quit ..DeleteControlledItem(InternalName)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteControlledItem">
<Description>

Deletes a source controlled item</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set extname = ..ExternalName(InternalName)
	do ..Logger.Info("Deleting file: "_extname)
	set ret = ##class(%File).Delete(extname)
		
	kill ^SourceControl(0,InternalName)
	kill ^SourceControl(1,InternalName)
	
	quit ret
]]></Implementation>
</Method>

<Method name="NormalizeInternalName">
<Description>

Provides a normalized way to format InternalNames (uppercase extension)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<Implementation><![CDATA[
	set name=$piece(InternalName,".",1,$length(InternalName,".")-1)
 	set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"U")
 	quit name_"."_ext
]]></Implementation>
</Method>

<Method name="ExternalName">
<Description>

Returns the external name (external file name) corresponding to a Caché element</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// check if it is a UserType (e.g. BPL, DTL, etc.)
	if ##class(%RoutineMgr).UserType(InternalName,.docclass,.doctype) {
		// check for a real abstract document subclass (or GetOther() may not work)
		if $classmethod(docclass,"%IsA","%Studio.AbstractDocument") {
			set actualName = $classmethod(docclass,"GetOther",InternalName)
			// the actualName is only valid if we get a single .cls as a result
			if actualName'[",",$zconvert($piece(actualName,".",$length(actualName,".")),"U")="CLS" {
				// we use what GetOther() gives us, thus Demo.Loan.FindRateProcess.bpl becomes Demo.Loan.FindRateProcess.cls
				set InternalName = actualName
			}
		}
	}
	
 	set name=$piece(InternalName,".",1,$length(InternalName,".")-1)
 	set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
 	quit:name="" ""
 	
 	set filename=ext_"/"_$translate(name,".","/")_$case(..UseXMLExtension, 1:".xml", :"."_ext)
 	quit ..Command.CacheDir_filename
]]></Implementation>
</Method>

<Method name="InternalName">
<Description>

Returns the internal name corresponding to an external file</Description>
<FormalSpec>ExternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	// ignore files which are not under cache subdir
 	if ExternalName'[..Command.#CACHEDIRNAME quit ""
 	
 	// remove cache subdir name to calculate InternalName
 	set ExternalName = $replace(ExternalName,..Command.#CACHEDIRNAME,"")
 	
 	set ext=$zconvert($piece(ExternalName,"/"),"U")
 	set left=$piece(ExternalName,"/",2,$length(ExternalName,"/"))
 	set name=$piece(left,".")
 	set result=$translate(name,"/",".")_"."_ext
 	quit result
]]></Implementation>
</Method>

<Method name="Print">
<Description>

Prints out output from git command</Description>
<FormalSpec><![CDATA[&pOutput]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	try {
		set next=""
		for {
			set next=$order(pOutput(next))
			quit:next=""
       		do ..Logger.Info(pOutput(next))
   		}
	} catch (errObj) {
		// nothing
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="IsSupported">
<Description>

Returns if an item is supported or not</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	
	set ntypes=$length(..#NOTSUPPORTEDTYPES,",")
	for i=1:1:ntypes {
		set type=$piece(..#NOTSUPPORTEDTYPES,",",i)
		if $zcvt(InternalName,"U")[type {
			set tError="Error: "_type_" items are not currently supported"
	    	set ret=$$$ERROR($$$GeneralError,tError)
	    	do ..Logger.Error(tError)
			quit
		}
	}
	
	quit ret
]]></Implementation>
</Method>

<Method name="CanExportExtensionUDL">
<Description>

Returns if an extension can </Description>
<FormalSpec>extension:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit ($listfind(..#NOTUDLEXTENSIONS, extension)=0)
]]></Implementation>
</Method>

<Method name="ReloadFiles">
<Description><![CDATA[

Reloads files passed <files> list:
Files marked as "D" will be deleted, rest will be reloaded
Each file entry should be like:
A path/file.xml
M path/file1.xml
D path/file2.xml]]></Description>
<FormalSpec><![CDATA[&files,*updated,*deleted]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set next="", updated="", deleted=""
	for {
		set next=$order(files(next))
		quit:next=""
		
		set line=files(next)
		set line=$tr(line,$c(9)," ")
		set line=$zstrip(line,"=W")
		
		set status=$p(line," ",1)
		set file=$p(line," ",2)
		
		set internalname=..InternalName(file)
		if internalname="" {
			do ..Logger.Info(">>Ignoring "_file)
		}
		elseif status'="D" {
			do ..Logger.Info(">>Loading "_internalname)
			set tSC=..OnBeforeLoad(internalname)
			set updated = updated_$lb(internalname)
		}
		elseif status="D" {
			do ..Logger.Info(">>Deleting "_internalname)
			set tSC=##class(%RoutineMgr).Delete(internalname)
			set tSC=..DeleteControlledItem(internalname)
			set deleted = deleted_$lb(internalname)
		}
	}
	
	// callback
	if ..OnReloadFiles'=""{
		do ..Logger.Info($char(13)_">Calling on.reloadfiles callback: "_$listget(..OnReloadFiles,1)_":"_$listget(..OnReloadFiles,2))
		do ..Logger.Info(">result="_$classmethod($listget(..OnReloadFiles,1), $listget(..OnReloadFiles,2), updated, deleted))
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// ======================

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// SOURCE CONTROL CALLS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// ======================

]]></Content>
</UDLText>

<Method name="GetStatus">
<Description>

Returns status of an item </Description>
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&IsAdded:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	quit:InternalName="" $$$OK
 	
 	set (statuscode,statusdesc)=""
 	set Editable=0,IsCheckedOut=0,UserCheckedOut=""
 	set extname=..ExternalName(InternalName)
 
 	set exists=##class(%File).Exists(extname)
 	if exists {
 		set tSC = ..Command.Status(extname, .statuscode, .statusdesc, .output, 0)
 		if $$$ISERR(tSC) quit tSC
 	}
 	set IsInSourceControl=((exists)&&(statuscode'="?")&&(statuscode'=""))
 	set Editable=1
 	set IsCheckedOut=(statuscode="M")
 	set IsAdded=(statuscode="A")
 	quit $$$OK
]]></Implementation>
</Method>

<Method name="Commit">
<Description>

Commits</Description>
<FormalSpec>InternalName:%String,Description:%String,pAmend:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	// export the latest version
 	set tSC=..OnAfterSave(InternalName)
 	if $$$ISERR(tSC) quit tSC

 	// git commit
 	set tSC=..Command.Commit(..ExternalName(InternalName), Description, .output, pAmend, 1)
 	do ..Print(.output)
 	quit tSC
]]></Implementation>
</Method>

<Method name="Revert">
<Description>

Reverts an item</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Checkout(..ExternalName(InternalName),.output)
	do ..Print(.output)
	if $$$ISERR(tSC) quit tSC
	
	quit ..OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<Description>

Check if item is under source control</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set tSC = ..GetStatus(InternalName, .isinsourcecontrol, .iseditable, .ischeckedout, .isadded)
 	quit $get(isinsourcecontrol,0)
]]></Implementation>
</Method>

<Method name="Add">
<Description>

Adds an item</Description>
<FormalSpec>InternalName:%String,Description:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// export the class
	set extname=..ExternalName(InternalName)
	set sc = ..ExportToFile(InternalName, extname)
	
	set tSC=..Command.Add(extname,.output)
	do ..Print(.output)
	if $$$ISERR(tSC) quit tSC
	
	quit ..OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="Log">
<Description>

Returns source control log of an item</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Log(..ExternalName(InternalName),.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="Diff">
<Description>

Returns source control log of an item</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Diff(..ExternalName(InternalName),.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="Status">
<Description>

Returns source control status of entire working directory</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Status("",.statuscode,.statusdesc,.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="AddAllChanges">
<Description>

Adds all changes to stage</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Add("",.output)
	do ..Print(.output)
	if $$$ISERR(tSC) quit tSC
	
	set tSC = ..Status("")
	quit tSC
]]></Implementation>
</Method>

<Method name="Unstage">
<Description>

Unstages a file</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Reset(..ExternalName(InternalName),.output,1)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="NewBranch">
<Description>

Creates a new branch</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Branch(pBranch,.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="ListBranches">
<Description>

List branches</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Branch("",.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="CreateAndSwitchToBranch">
<Description>

Creates a branch and then switch to it</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set tSC = ..NewBranch(pBranch)
	if $$$ISERR(tSC) quit tSC
	
	quit ..SwitchToBranch(pBranch)
]]></Implementation>
</Method>

<Method name="SwitchToBranch">
<Description>

Switchs workspace to branch</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// diff with new branch
	set tSC=..Command.DiffStatus(pBranch, 1, .files,0)
	if $$$ISERR(tSC) quit tSC
	
	// switch branch
	set current=..Command.GetCurrentBranch()
	set tSC=..Command.Checkout("",pBranch,.output,1)
	do ..Print(.output)
	if $$$ISERR(tSC) quit tSC
	
	// reload files
	do ..Logger.Info($c(13)_">Analyzing files after changing from """_current_""" to """_pBranch_"""")
	do ..ReloadFiles(.files, .updated, .deleted)
	do ..Logger.Info(">Completed.")
	
	quit tSC
]]></Implementation>
</Method>

<Method name="DiffWithBranch">
<Description>

Diffs current branch with other branch</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.DiffStat(pBranch, 0, .output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="Merge">
<Description>

Merges with a branch</Description>
<FormalSpec>pBranch:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Merge(pBranch,0,.output,1)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="AbortMerge">
<Description>

Aborts a merge</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Merge("",1,.output,1)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="ListConfig">
<Description>

Lists current git config</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.ListConfig(.output)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="LoadStatusChanges">
<Description>

Loads changes (as shown in git status)</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Status("",.statuscode,.statusdesc,.output,0,1)
	do ..Print(.output)
	
	// reload / delete files
	do ..Logger.Info($c(13)_">Reloading changed files:")
	do ..ReloadFiles(.output, .updated, .deleted)
	do ..Logger.Info(">Completed.")
	
	quit tSC
]]></Implementation>
</Method>

<Method name="Push">
<Description>

Pushes local changes to origin</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.Push(.output,1)
	do ..Print(.output)
	quit tSC
]]></Implementation>
</Method>

<Method name="Pull">
<Description>

Pulls fresh changes from origin to local</Description>
<FormalSpec>pDry:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// update remote origin info
	set tSC=..Command.RemoteUpdate("origin", .out1, 1)
	do ..Print(.out1)
	
	// get diff current..origin
	set current = ..Command.GetCurrentBranch()
	set tSC = ..Command.DiffStatus("origin"_"/"_current, 1, .out2, 1)
	do ..Print(.out2)
	
	if 'pDry {
		// pull
		set tSC=..Command.Pull(.out3, 1)
		do ..Print(.out3)
	
		// load changes into studio 
		do ..Logger.Info($c(13)_">Reloading diff with: origin"_"/"_current)
		do ..ReloadFiles(.out2, .updated, .deleted)
		do ..Logger.Info(">Completed.")
	}
	
	if $$$ISOK(tSC),..OnPull'=""{
		do ..Logger.Info($char(13)_">Calling on.pull callback: "_$listget(..OnPull,1)_":"_$listget(..OnPull,2))
		do ..Logger.Info(">result="_$classmethod($listget(..OnPull,1), $listget(..OnPull,2), updated, deleted))
	}
	
	quit tSC
]]></Implementation>
</Method>

<Method name="WorkdirLoadFiles">
<Description>

Loads modified files from workdir and checks for troubled ^SourceControl entries</Description>
<FormalSpec>pPath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC=..Command.LsFiles(.output, 1)
	do ..Print(.output)
	
	// reload / delete files 
	do ..Logger.Info($c(13)_">Reloading files based on GIT status:")
	do ..ReloadFiles(.output, .updated, .deleted)
	do ..Logger.Info(">Completed.")
	
	// check for deleted
	set file=""
	for {
		set file=$order(^SourceControl(1,file))
		quit:file=""
		
		set extname=..ExternalName(file)
		if '##class(%File).Exists(extname) {
			do ..Logger.Info(">>Deleting "_file_" because it is in ^SourceControl but not in workdir")
			set tSC=##class(%RoutineMgr).Delete(file)
			set tSC=..DeleteControlledItem(file)
			kill ^SourceControl(1,file)
		}
	}
	
	// callback
	if $$$ISOK(tSC),..OnWorkDirLoad'=""{
		do ..Logger.Info($char(13)_">Calling on.workdirload callback: "_$listget(..OnWorkDirLoad,1)_":"_$listget(..OnWorkDirLoad,2))
		do ..Logger.Info(">result="_$classmethod($listget(..OnWorkDirLoad,1), $listget(..OnWorkDirLoad,2), updated, deleted))
	}
	
	quit tSC
]]></Implementation>
</Method>

<Method name="AddClasses">
<Description>

Adds classes (only non-generated) which name starts with pStartsWith.
(useful to add a bunch of classes belonging to a package from Terminal).</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartsWith:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		set control = ##class(Studio.SourceControl.GIT).%New($lb("", "", "0", "2015.200000"))
		
		set statement = ##class(%SQL.Statement).%New()
   		set sql = "select id from %Dictionary.ClassDefinition where id %startswith ? and generatedby is null"
   		do statement.%Prepare(sql)
   		set resultSet = statement.%Execute(pStartsWith)
   		
   		while resultSet.%Next() {
			set className = resultSet.ID_".cls"
			$$$ThrowOnError(control.Add(className))
   		}
   		
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>
</Class>
</Export>
